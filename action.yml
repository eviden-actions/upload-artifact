name: 'Tar and Upload a Build Artifact'
description: 'Pack files in a tar archive and upload a build artifact that can be used by subsequent workflow steps'

branding:
  icon: 'arrow-up-circle'
  color: 'orange'

inputs:
  name:
    description: 'Artifact name'
    default: 'artifact'
  path:
    description: >
      A file, directory or wildcard pattern (one per line) that describes what to upload.
      Lines starting with '!' are treated as exclusion patterns and will be omitted from the archive (passed to tar via --exclude).
    required: true
  directory:
    description: 'Change to DIR before performing any operations. This option is order-sensitive, i.e. it affects all optionsthat follow.'
    default: '.'
  if-no-files-found:
    description: >
      The desired behavior if no files are found using the provided path.
      Available Options:
        warn: Output a warning but do not fail the action
        error: Fail the action with an error message
        ignore: Do not output any warnings or errors, the action does not fail
    default: 'warn'
  retention-days:
    description: >
      Duration after which artifact will expire in days. 0 means using default retention.
      Minimum 1 day.
      Maximum 90 days unless changed from the repository settings page.
  compression-level:
    description: >
      The level of compression for Zlib to be applied to the artifact archive.
      The value can range from 0 to 9:
      - 0: No compression
      - 1: Best speed
      - 6: Default compression (same as GNU Gzip)
      - 9: Best compression
      Higher levels will result in better compression, but will take longer to complete.
      For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
    default: '6'
  overwrite:
    description: >
      If true, an artifact with a matching name will be deleted before a new one is uploaded.
      If false, the action will fail if an artifact for the given name already exists.
      Does not fail if the artifact does not exist.
    default: 'false'

outputs:
  artifact-id:
    description: >
      A unique identifier for the artifact that was just uploaded. Empty if the artifact upload failed.

      This ID can be used as input to other APIs to download, delete or get more information about an artifact: https://docs.github.com/en/rest/actions/artifacts
    value: ${{steps.upload-artifact.outputs.artifact-id}}
  artifact-url:
    description: >
      A download URL for the artifact that was just uploaded. Empty if the artifact upload failed.

      This download URL only works for requests Authenticated with GitHub. Anonymous downloads will be prompted to first login. 
      If an anonymous download URL is needed than a short time restricted URL can be generated using the download artifact API: https://docs.github.com/en/rest/actions/artifacts#download-an-artifact    

      This URL will be valid for as long as the artifact exists and the workflow run and repository exists. Once an artifact has expired this URL will no longer work.
      Common uses cases for such a download URL can be adding download links to artifacts in descriptions or comments on pull requests or issues.
    value: ${{steps.upload-artifact.outputs.artifact-url}}

runs:
  using: 'composite'
  steps:
    - name: 'ðŸ“‚ prepare path'
      id: input_path
      shell: 'bash'
      run: |
        # Original multi-line input (may contain inclusions and exclusions starting with '!')
        raw_input="${{ inputs.path }}"
        # Normalize line endings (remove CR)
        raw_input=${raw_input//$'\r'/}

        include_path=""
        exclude_path=""

        # Iterate over each (non-empty) line preserving patterns; lines starting with '!' are exclusions
        while IFS= read -r line; do
          # Trim leading/trailing whitespace
            trimmed=$(echo "$line" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            [ -z "$trimmed" ] && continue
            if [[ "$trimmed" == !* ]]; then
              pattern=${trimmed:1}
              [ -n "$pattern" ] && exclude_path+="$pattern "
            else
              include_path+="$trimmed "
            fi
        done <<< "$raw_input"

        # Remove trailing spaces
        include_path=${include_path%$' '}
        exclude_path=${exclude_path%$' '}

        echo "include_path=$include_path" >> $GITHUB_OUTPUT
        echo "exclude_path=$exclude_path" >> $GITHUB_OUTPUT
        echo "Include patterns: $include_path"
        echo "Exclude patterns: $exclude_path"

    - name: 'ðŸ“¦ tar inputs'
      shell: 'bash'
      run: |
        includes="${{ steps.input_path.outputs.include_path }}"
        excludes="${{ steps.input_path.outputs.exclude_path }}"

        # Determine if at least one include exists (pattern existence check is best-effort)
        archive_created=false
        for x in $includes; do
          if compgen -G "$x" > /dev/null 2>&1 || test -e "$x"; then
            # Build tar command with optional --exclude patterns BEFORE the file list
            cmd=(tar -cvf "${{ inputs.name }}.tar" -C "${{ inputs.directory }}")
            for e in $excludes; do
              # Use --exclude to omit the pattern (note: user requested -x, but -x is extract; --exclude is the correct flag)
              cmd+=(--exclude="$e")
            done
            # shellcheck disable=SC2206
            cmd+=(--ignore-failed-read)
            file_list=( $includes )
            cmd+=("${file_list[@]}")

            echo "Running: ${cmd[*]}"
            "${cmd[@]}"
            echo "Adding $includes (excluding: $excludes) from ${{ inputs.directory }} to ${{ inputs.name }}.tar"
            archive_created=true
            break
          fi
        done

        if $archive_created; then
          echo "${{ inputs.name }}.tar created"
        else
          echo "No files found"
        fi

    - name: 'ðŸ“¤ upload artifact'
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.name }}.tar
        if-no-files-found: ${{ inputs.if-no-files-found }}
        retention-days: ${{ inputs.retention-days }}
        compression-level: ${{ inputs.compression-level }}
        overwrite: ${{ inputs.overwrite }}

    - name: 'ðŸ§¹ cleanup'
      shell: 'bash'
      run: rm -f ${{ inputs.name }}.tar
