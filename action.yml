name: 'Tar and Upload a Build Artifact'
description: 'Pack files in a tar archive and upload a build artifact that can be used by subsequent workflow steps'

branding:
  icon: 'arrow-up-circle'
  color: 'orange'

inputs:
  name:
    description: 'Artifact name'
    default: 'artifact'
  path:
    description: 'A file, directory or wildcard pattern that describes what to upload'
    required: true
  directory:
    description: 'Change to DIR before performing any operations. This option is order-sensitive, i.e. it affects all optionsthat follow.'
    default: '.'
  if-no-files-found:
    description: >
      The desired behavior if no files are found using the provided path.
      Available Options:
        warn: Output a warning but do not fail the action
        error: Fail the action with an error message
        ignore: Do not output any warnings or errors, the action does not fail
    default: 'warn'
  retention-days:
    description: >
      Duration after which artifact will expire in days. 0 means using default retention.
      Minimum 1 day.
      Maximum 90 days unless changed from the repository settings page.

runs:
  using: 'composite'
  steps:
    - name: 'ðŸ“‚ prepare path'
      id: input_path
      shell: 'bash'
      run: |
        input_path="${{ inputs.path }}"
        input_path=${input_path//'\r'/}
        input_path=${input_path//$'\n'/' '}
        input_path=${input_path%$' '}
        echo "input_path=$input_path" >> $GITHUB_OUTPUT

    - name: 'ðŸ“¦ tar inputs'
      shell: 'bash'
      run: |
        for x in ${{ steps.input_path.outputs.input_path }}; do
            # exit the loop if no file matching inputs.path exists
            if test -e "$x"; then
              # at least one path exists and tar won't be empty
              tar -cvf ${{ inputs.name }}.tar -C ${{ inputs.directory }} ${{ steps.input_path.outputs.input_path }} --ignore-failed-read
              echo "Adding ${{ steps.input_path.outputs.input_path }} from ${{ inputs.directory }} to ${{ inputs.name }}.tar"
              # exit the loop since the tar was created
              break
            fi
        done
        test -f ${{ inputs.name }}.tar && echo "${{ inputs.name }}.tar created" || echo "No files found"

    - name: 'ðŸ“¤ upload artifact'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.name }}.tar
        if-no-files-found: ${{ inputs.if-no-files-found }}
        retention-days: ${{ inputs.retention-days }}

    - name: 'ðŸ§¹ cleanup'
      shell: 'bash'
      run: rm -f ${{ inputs.name }}.tar
